{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<ul> <li> <p>Kubernetes</p> <p> Getting started</p> </li> </ul>"},{"location":"kubernetes/","title":"Overview","text":"<ul> <li> Authentik</li> <li> Cert Manager</li> </ul>"},{"location":"kubernetes/applications/authentik/","title":"Authentik","text":""},{"location":"kubernetes/applications/authentik/#introduction","title":"Introduction","text":"<p>Authentik is an open-source Identity Provider (IdP) offering advanced authentication, authorization, and auditing solutions. It provides full support for modern protocols like OAuth2, SAML, and OpenID Connect. This guide covers deploying Authentik into your Kubernetes cluster using Helm and Helmfile, with a focus on customization.</p>"},{"location":"kubernetes/applications/authentik/#configuration","title":"Configuration","text":"<p>The following is a sample configuration. You'll need to adjust this according to your environment:</p>"},{"location":"kubernetes/applications/authentik/#values","title":"values","text":"authentik/values.yaml<pre><code>authentik:\n  secret_key: \"SECRET_KEY\" # (1)!\n  error_reporting:\n    enabled: false\n  postgresql:\n    password: \"DB_PASSWORD\" # (2)!\n\nserver:\n  ingress:\n    ingressClassName: traefik # (3)!\n    enabled: true\n    hosts:\n      - auth.domain.tld # (4)!\n\npostgresql:\n  enabled: true\n  auth:\n    password: \"COPY_OF_DB_PASSWORD\" # (5)!\n\nredis:\n  enabled: true\n</code></pre> <ol> <li>Generate a password with <code>openssl rand 60 | base64 -w 0</code></li> <li>Generate a password with <code>openssl rand 60 | base64 -w 0</code></li> <li><code>nginx</code> or others can be used aswell. If left out, the default ingress controller is used.</li> <li>External FQDN for ingress controller.</li> <li>Use the same password as provided in <code>authentik.postgresql.password</code></li> </ol> <p>Configuration Breakdown</p> <ul> <li><code>authentik.secret_key</code>: This key is used for cookie singing and unique user IDs. Ensure it is unique and securely generated.</li> <li><code>authentik.postgresql.password</code>: This is the password for connecting Authentik to the PostgreSQL database.</li> <li><code>server.ingress</code>: This section configures how Authentik is accessed externally. In this case, it's using the Traefik ingress controller.</li> <li><code>postgresql.password</code>: This is the password used by Authentik for connecting to the PostgreSQL database.</li> <li><code>redis.enabled</code>: Enables Redis as a caching layer for Authentik.</li> <li>See all configurable values on Authentiks artifacthub page.</li> </ul>"},{"location":"kubernetes/applications/authentik/#deployment","title":"Deployment","text":"<p>File structure</p> <pre><code>\u251c\u2500\u2500 authentik\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 values.yaml\n\u2514\u2500\u2500 helmfile.yaml\n</code></pre>"},{"location":"kubernetes/applications/authentik/#with-helm","title":"with helm","text":"<pre><code>helm repo add authentik https://charts.goauthentik.io --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install authentik authentik/authentik \\\n  --namespace authentik \\\n  --create-namespace \\\n  --values authentik/values.yaml\n</code></pre>"},{"location":"kubernetes/applications/authentik/#with-helmfile","title":"with helmfile","text":"helmfile.yaml<pre><code>repositories:\n  - name: authentik\n    url: https://charts.goauthentik.io\n\nreleases:\n  - name: authentik\n    namespace: authentik\n    createNamespace: true\n    chart: authentik/authentik\n    values:\n      - authentik/values.yaml\n</code></pre> <pre><code>helmfile apply\n</code></pre>"},{"location":"kubernetes/applications/authentik/#info","title":"Info","text":"<p>Links</p> <ul> <li>Authentik Homepage</li> <li>Authentik Documentation</li> <li>Authentik Source repository</li> <li>Authentik Helm chart</li> <li>Authentik Helm chart values</li> <li>Authentik Helm chart values file</li> </ul>"},{"location":"kubernetes/applications/cert-manager/","title":"Cert Manager","text":""},{"location":"kubernetes/applications/cert-manager/#introduction","title":"Introduction","text":"<p>Cert Manager is an open-source Kubernetes add-on that automates the management and issuance of TLS certificates from various Certificate Authorities (CAs). It ensures that certificates are properly issued, renewed, and available to secure your Kubernetes services. In this guide, we will cover how to deploy Cert Manager using Helm and Helmfile.</p>"},{"location":"kubernetes/applications/cert-manager/#configuration","title":"Configuration","text":"<p>The following is a sample configuration. You'll need to adjust this according to your environment:</p>"},{"location":"kubernetes/applications/cert-manager/#values","title":"values","text":"cert-manager/values.yaml<pre><code>crds:\n  enabled: true\n</code></pre> <p>Configuration Breakdown</p> <ul> <li><code>crds.enabled</code>: This option decides if the CRDs should be installed as part of the Helm installation.</li> <li>See all configurable values on cert-managers artifacthub page.</li> </ul>"},{"location":"kubernetes/applications/cert-manager/#deployment","title":"Deployment","text":"<p>File structure</p> <pre><code>\u251c\u2500\u2500 cert-manager\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 values.yaml\n\u2514\u2500\u2500 helmfile.yaml\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#with-helm","title":"with helm","text":"<pre><code>helm repo add jetstack https://charts.jetstack.io --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --values cert-manager/values.yaml\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#with-helmfile","title":"with helmfile","text":"helmfile.yaml<pre><code>repositories:\n  - name: jetstack\n    url: https://charts.jetstack.io\n\nreleases:\n  - name: cert-manager\n    namespace: cert-manager\n    createNamespace: true\n    chart: jetstack/cert-manager\n    values:\n      - cert-manager/values.yaml\n</code></pre> <pre><code>helmfile apply\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#verification","title":"Verification","text":"<pre><code>kubectl get pods -n cert-manager\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#usage","title":"Usage","text":""},{"location":"kubernetes/applications/cert-manager/#create-a-issuer","title":"Create a Issuer","text":"cert-manager/secret.yaml<pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: cloudflare-api-token-secret\n  namespace: cert-manager\ntype: Opaque\nstringData:\n  api-token: TopSecretCloudflareApiToken\n</code></pre> <ol> <li>Create a scpoed api token at cloudflare with <code>Zone:Read</code> and <code>DNS:Edit</code> permissions.</li> </ol> <pre><code>kubectl apply -f cert-manager/secret.yaml\n</code></pre> cert-manager/issuer.yaml<pre><code>apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: johndoe@domain.tld\n    privateKeySecretRef:\n      name: letsencrypt\n    solvers:\n      - selector:\n          dnsZones:\n            - domain.tld\n        dns01:\n          cloudflare:\n            apiTokenSecretRef:\n              name: cloudflare-api-token-secret\n              key: api-token\n</code></pre> <ol> <li><code>ClusterIssuer</code> for full cluster isuer or <code>Issuer</code> for namespace scoped issuer.</li> <li>Use <code>https://acme-staging-v02.api.letsencrypt.org/directory</code> for staging enviroment.</li> </ol> <pre><code>kubectl apply -f cert-manager/issuer.yaml\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#create-a-certificate","title":"Create a Certificate","text":"cert-manager/certificate.yaml<pre><code>apiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: default-cert\n  namespace: default\nspec:\n  secretName: default-tls\n  issuerRef:\n    name: letsencrypt\n    kind: ClusterIssuer\n  dnsNames:\n    - \"domain.tld\"\n    - \"*.domain.tld\"\n</code></pre> <pre><code>kubectl apply -f cert-manager/certificate.yaml\n</code></pre> <pre><code>kubectl describe certificate default-cert -n default\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#troubleshooting","title":"Troubleshooting","text":"<pre><code>kubectl get certificates -A\n</code></pre> <pre><code>kubectl describe certificate &lt;certificate-name&gt; -n &lt;namespace&gt;\n</code></pre>"},{"location":"kubernetes/applications/cert-manager/#infomation","title":"Infomation","text":"<p>Files</p> <pre><code>kubernetes\n\u251c\u2500\u2500 cert-manager\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 certificate.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 issuer.yaml\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 secret.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 values.yaml\n\u2514\u2500\u2500 helmfile.yaml\n</code></pre> <p>Links</p> <ul> <li>Cert Manager Homepage</li> <li>Cert Manager Documentation</li> <li>Cert Manager Source repository</li> <li>Cert Manager Helm chart</li> <li>Cert Manager Helm chart values</li> </ul>"},{"location":"kubernetes/applications/longhorn/","title":"Longhorn","text":"longhorn-values.yaml<pre><code>persistence:\n  defaultClassReplicaCount: 1\ndefaultSettings:\n  defaultReplicaCount: 1\nlonghornUI:\n  replicas: 1\n</code></pre> <pre><code>helm repo add longhorn https://charts.longhorn.io --force-update\n</code></pre> <pre><code>kubectl apply -f \"https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/prerequisite/longhorn-iscsi-installation.yaml\"\n</code></pre> <pre><code>kubectl apply -f \"https://raw.githubusercontent.com/longhorn/longhorn/master/deploy/prerequisite/longhorn-nfs-installation.yaml\"\n</code></pre> <pre><code>helm upgrade \\\n  --install longhorn longhorn/longhorn \\\n  --namespace longhorn-system \\\n  --create-namespace \\\n  --values longhorn-values.yaml\n</code></pre>"},{"location":"kubernetes/applications/mattermost/","title":"Mattermost","text":""},{"location":"kubernetes/applications/mattermost/#requirements","title":"Requirements","text":"<p>Preperations</p> <ul> <li> A running PostgreSql with a dedicated user, password and database for MatterMost</li> </ul> mattermost-values.yaml<pre><code>persistence:\n  data:\n    enabled: true\n    size: 10Gi\n  plugins:\n    enabled: true\n    size: 1Gi\n\nexternalDB:\n  enabled: true\n  externalDriverType: \"postgres\"\n  externalConnectionString: \"DB_USER:DB_PASSWORD@postgresql:5432/DB_DATABASE?sslmode=disable&amp;connect_timeout=10\"\n\nmysql:\n  enabled: false\n\nsecurityContext:\n  fsGroup: 2000\n  runAsGroup: 2000\n  runAsUser: 2000\n</code></pre> <pre><code>helm repo add mattermost https://helm.mattermost.com --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install mattermost mattermost/mattermost-team-edition \\\n  --namespace mattermost \\\n  --create-namespace \\\n  --values mattermost-values.yaml\n</code></pre>"},{"location":"kubernetes/applications/metallb/","title":"Metallb","text":"metallb-config.yaml<pre><code>---\napiVersion: metallb.io/v1beta1\nkind: IPAddressPool\nmetadata:\n  name: address-pool\n  namespace: metallb-system\nspec:\n  addresses:\n    - 10.10.10.0/24\n---\napiVersion: metallb.io/v1beta1\nkind: L2Advertisement\nmetadata:\n  name: advertisement\n  namespace: metallb-system\n---\n</code></pre> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install metallb bitnami/metallb \\\n  --namespace metallb-system \\\n  --create-namespace \\\n  --wait\n</code></pre> <pre><code>kubectl apply -f metallb-config.yaml\n</code></pre>"},{"location":"kubernetes/applications/nginx/","title":"Nginx","text":"nginx-values.yaml<pre><code>controller:\n  extraArgs:\n    default-ssl-certificate: default/default-tls\n</code></pre> <pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install ingress-nginx ingress-nginx/ingress-nginx \\\n  --namespace nginx-system \\\n  --create-namespace \\\n  --values nginx-values.yaml\n</code></pre>"},{"location":"kubernetes/applications/postgresql/","title":"Postgresql","text":"postgresql-values.yaml<pre><code>global:\n  postgresql:\n    auth:\n      username: \"DB_USER\" # (1)!\n      password: \"DB_PASSWORD\" # (2)!\n      database: \"DB_DATABASE\"\n</code></pre> <ol> <li>Use applications name</li> <li>Use a random generate password 32 caraters</li> </ol> <pre><code>repo add bitnami https://charts.bitnami.com/bitnami --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install postgresql bitnami/postgresql \\\n  --namespace postgresql \\\n  --create-namespace \\\n  --values postgresql-values.yaml\n</code></pre>"},{"location":"kubernetes/applications/redis/","title":"Redis","text":"redis-values.yaml<pre><code>auth:\n  password: \"TOP SECRET PASSWORD\"\n</code></pre> <pre><code>helm repo add bitnami https://charts.bitnami.com/bitnami --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install redis bitnami/redis \\\n  --namespace redis \\\n  --create-namespace \\\n  --values redis-values.yaml\n</code></pre>"},{"location":"kubernetes/applications/traefik/","title":"Traefik","text":"traefik-values.yaml<pre><code>ports:\n  web:\n    forwardedHeaders:\n      insecure: true\n  websecure:\n    forwardedHeaders:\n      insecure: true\ningressRoute:\n  dashboard:\n    enabled: true\n  healthcheck:\n    enabled: true\nproviders:\n  kubernetesCRD:\n    allowCrossNamespace: true\n  kubernetesIngress:\n    allowCrossNamespace: true\n    publishedService:\n      enabled: true\nlogs:\n  access:\n    enabled: true\npriorityClassName: \"system-cluster-critical\"\n</code></pre> traefik-config.yaml<pre><code>apiVersion: traefik.io/v1alpha1\nkind: TLSStore\nmetadata:\n  name: default\n  namespace: default\nspec:\n  defaultCertificate:\n    secretName: default-tls\n</code></pre> <pre><code>helm repo add traefik https://traefik.github.io/charts --force-update\n</code></pre> <pre><code>helm upgrade \\\n  --install traefik traefik/traefik \\\n  --namespace traefik-system \\\n  --create-namespace \\\n  --values traefik-values.yaml \\\n  --wait\n</code></pre> <pre><code>kubectl apply -f traefik-config.yaml\n</code></pre>"},{"location":"kubernetes/tools/helm/","title":"Helm","text":"<p>Links</p> <ul> <li>Homepage</li> <li>Source</li> <li>Documentation</li> </ul>"},{"location":"kubernetes/tools/helm/#instalation","title":"Instalation","text":""},{"location":"kubernetes/tools/helm/#from-script","title":"From script","text":"<pre><code>curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n</code></pre> <pre><code>chmod 700 get_helm.sh\n</code></pre> <pre><code>./get_helm.sh\n</code></pre>"},{"location":"kubernetes/tools/helm/#from-homebrew-macos","title":"From Homebrew (macOS)","text":"<pre><code>brew install helm\n</code></pre>"},{"location":"kubernetes/tools/helmfile/","title":"Helmfile","text":"<p>Links</p> <ul> <li>Source</li> <li>Documentation</li> </ul>"},{"location":"kubernetes/tools/helmfile/#instalation","title":"Instalation","text":""},{"location":"kubernetes/tools/helmfile/#from-release","title":"From release","text":"<p>Download latest release here</p>"},{"location":"kubernetes/tools/helmfile/#from-homebrew-macos","title":"From Homebrew (macOS)","text":"<pre><code>brew install helmfile\n</code></pre>"}]}